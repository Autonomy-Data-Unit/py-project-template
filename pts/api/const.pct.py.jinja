# %% [markdown]
# # const

# %%
#|default_exp const

# %%
#|hide
import nblite; from nbdev.showdoc import show_doc; nblite.nbl_export()

# %%
#|export
from pathlib import Path
import toml
from typing import Optional
from pydantic import BaseModel, ConfigDict, model_validator
from pathlib import Path
from importlib import resources
import adulib, adulib.llm
from dotenv import load_dotenv
import {{module_name_slug}} as proj

# %%
#|export
from {{module_name_slug}}.config import config as _config


# %% [markdown]
# Set up paths

# %%
#|export
def _as_Path(p): return Path(p) if p else None

root_path = resources.files(f'{proj.__name__}').joinpath('').resolve()
store_path = _as_Path(_config.store_path) or resources.files(f'{proj.__name__}').joinpath('store').resolve()
scripts_path = resources.files(f'{proj.__name__}').joinpath('scripts').resolve()
assets_path = resources.files(f'{proj.__name__}').joinpath('assets').resolve()

caches_path = _as_Path(_config.caches_path) or store_path / 'caches'
data_path = _as_Path(_config.data_path) or store_path / 'data'
misc_path = _as_Path(_config.misc_path) or store_path / 'misc'
pre_output = _as_Path(_config.pre_output) or store_path / 'pre_output'
output_path = _as_Path(_config.output_path) or store_path / 'output'

# %%
#|export
store_path.mkdir(parents=True, exist_ok=True)
scripts_path.mkdir(parents=True, exist_ok=True)
caches_path.mkdir(parents=True, exist_ok=True)
data_path.mkdir(parents=True, exist_ok=True)
misc_path.mkdir(parents=True, exist_ok=True)
pre_output.mkdir(parents=True, exist_ok=True)
output_path.mkdir(parents=True, exist_ok=True)

# %% [markdown]
# Set up default caching and LLM call logging

# %%
#|export
adulib.caching.set_default_cache_path(caches_path / 'default')
adulib.llm.set_call_log_save_path(store_path / 'call_log.jsonl')

# %% [markdown]
# Load environment variables

# %%
#|export
load_dotenv()
